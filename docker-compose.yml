# Docker Compose configuration for JamSplitter
# Version 3.8 of the Docker Compose file format
version: "3.8"

# Define all services in the application
services:
  # Main CPU-based service
  jam-splitter:
    build: 
      context: .
      dockerfile: Dockerfile
    image: jam-splitter-agent:latest
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - PYTHONUNBUFFERED=1
    volumes:
      - ./output_stems:/app/output_stems
      - ./cache.db:/app/cache.db
    user: "${UID:-1000}:${GID:-1000}"
    working_dir: /app
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G

  # NVIDIA GPU-accelerated service
  jam-splitter-nvidia:
    build:
      context: .
      dockerfile: Dockerfile.cuda
    image: jam-splitter-agent:cuda
    runtime: nvidia
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - NVIDIA_VISIBLE_DEVICES=all
      - PYTHONUNBUFFERED=1
    volumes:
      - ./output_stems:/app/output_stems
      - ./cache.db:/app/cache.db
    user: "${UID:-1000}:${GID:-1000}"
    working_dir: /app
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # AMD GPU-accelerated service
  jam-splitter-amd:
    build:
      context: .
      dockerfile: Dockerfile.rocm
    image: jam-splitter-agent:rocm
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - HSA_OVERRIDE_GFX_VERSION=10.3.0
      - PYTHONUNBUFFERED=1
    volumes:
      - ./output_stems:/app/output_stems
      - ./cache.db:/app/cache.db
    user: "${UID:-1000}:${GID:-1000}"
    working_dir: /app
    devices:
      - /dev/kfd
      - /dev/dri
    group_add:
      - video

  # FastAPI web service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    image: jam-splitter-agent:api
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    ports:
      - "8000:8000"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-jamsplitter}
      - REDIS_URL=redis://redis:6379/0
      - PYTHONUNBUFFERED=1
    volumes:
      - .:/app
    depends_on:
      - postgres
      - redis
    user: "${UID:-1000}:${GID:-1000}"
    working_dir: /app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database service
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-jamsplitter}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis cache service
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

# Volume definitions for persistent storage
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
